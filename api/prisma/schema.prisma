generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Document {
  docId         String       @id @default(cuid())
  docKey        String?      @unique // File path or identifier from IDP (nullable for migration)
  type          String       // "JD" or "RESUME"
  jobNumber     String
  content       String?      // Keep for backward compatibility during migration
  contentHash   String
  mimeType      String       @default("application/pdf")
  uploadedAt    DateTime     @default(now())
  extractions   Extraction[]
  jobResumes    JobResume[]
}

model Extraction {
  extractionId      String   @id @default(cuid())
  docId             String
  idpRequestId      String?
  extractionJson    String?
  extractionVersion String   @default("v1")
  status            String   @default("PENDING")
  createdAt         DateTime @default(now())
  document          Document @relation(fields: [docId], references: [docId], onDelete: Cascade)
}

model Job {
  jobId          String      @id @default(cuid())
  externalJobRef String      @unique
  roleId         String?
  jdDocId        String?
  status         String      @default("PENDING")
  modelVersion   String      @default("v1")
  createdAt      DateTime    @default(now())
  Role           Role?       @relation(fields: [roleId], references: [roleId])
  jobResumes     JobResume[]
  scores         Score[]
}

model JobResume {
  jobId       String
  resumeDocId String
  job         Job      @relation(fields: [jobId], references: [jobId], onDelete: Cascade)
  resume      Document @relation(fields: [resumeDocId], references: [docId], onDelete: Cascade)

  @@id([jobId, resumeDocId])
}

model Score {
  scoreId      String   @id @default(cuid())
  jobId        String
  resumeDocId  String
  modelVersion String   @default("v1")
  finalScore   Float
  reasonsJson  String
  createdAt    DateTime @default(now())
  job          Job      @relation(fields: [jobId], references: [jobId], onDelete: Cascade)

  @@unique([jobId, resumeDocId, modelVersion])
}

model Role {
  roleId         String   @id
  externalJobRef String   @unique
  title          String
  description    String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  Job            Job[]
}
